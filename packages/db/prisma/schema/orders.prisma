model Order {
  id                String            @id @default(uuid())
  orderId           Int               @unique
  orderHasProduct   ProductInOrder[]
  type              OrderType
  status            OrderStatus       @default(PENDING)
  withdrawalMethod  WithdrawalMethod
  terminalId        Int?
  price             Float
  createdAt         DateTime          @default(now())        
}

enum OrderType {
  DELIVERY
  PICKUP
  TERMINALS
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELED
}

enum WithdrawalMethod {
  CASH
  CARD
}

model ProductInOrder {
  id              String          @id @default(uuid())
  productId       String          
  product         Product         @relation(fields: [productId], references: [id])
  orderId         String          
  order           Order           @relation(fields: [orderId], references: [id])
  mandatory       Ingredient[]    @relation(name: "usedAsMandatoryIn")
  
  extraIngredients        ExtraIngredientInProductOrder[]
  optionalBaseIngredient  OptionalBaseIngredientInProductOrder[]
}

model ExtraIngredientInProductOrder {
  id               String         @id @default(uuid())
  productInOrderId String
  productInOrder   ProductInOrder @relation(fields: [productInOrderId], references: [id], onDelete: Cascade)
  ingredientId     String
  ingredient       Ingredient     @relation(fields: [ingredientId], references: [id])
  quantity         Int            @default(1)
  
  @@unique([productInOrderId, ingredientId])
}

model OptionalBaseIngredientInProductOrder {
  id               String         @id @default(uuid())
  productInOrderId String
  productInOrder   ProductInOrder @relation(fields: [productInOrderId], references: [id], onDelete: Cascade)
  ingredientId     String
  ingredient       Ingredient     @relation(fields: [ingredientId], references: [id])
  isSelected         Boolean            @default(false)
  
  @@unique([productInOrderId, ingredientId])
}
